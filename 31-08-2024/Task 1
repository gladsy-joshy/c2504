
***read from SQL, then apply exception handler, log it using log4net, unit tests using MSTest.***
-------------------------------------------------------------------------------------------------------

1. Program.cs
---------------

using System;
using System.Collections.Generic;
using System.Linq;
using log4net;
using System.Data.SqlClient;

namespace Week4AssessmentApp
{
    public class ServerException : Exception
    {
        public ServerException(string message) : base(message) { }
    }

    public class Medication
    {
        public int HospitalID { get; set; }
        public string DoctorName { get; set; }
        public string Name { get; set; }
        public double Dosage { get; set; }

        public override string ToString()
        {
            return $"[{HospitalID},{DoctorName},{Name},{Dosage}]";
        }
    }

    public class MedicationService
    {
        private static string connectionString = "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=Week4AssessmentDb;Integrated Security=True;";

        public static void Read(Medication[] meds)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    string query = "SELECT HospitalID, DoctorName, Name, Dosage FROM Medication";
                    SqlCommand cmd = new SqlCommand(query, conn);

                    conn.Open();
                    SqlDataReader reader = cmd.ExecuteReader();

                    for (int i = 0; i < meds.Length; i++)
                    {
                        if (!reader.Read())
                        {
                            throw new ServerException("[0101]Server Error.");
                        }
                        meds[i] = new Medication
                        {
                            HospitalID = (int)reader["HospitalID"],
                            DoctorName = reader["DoctorName"].ToString(),
                            Name = reader["Name"].ToString(),
                            Dosage = (double)reader["Dosage"]
                        };
                    }
                }
            }
            catch (SqlException ex)
            {
                throw new ServerException($"[0102]Server Error: {ex.Message}");
            }
            catch (ServerException ex)
            {
                throw ex;
            }
            catch (Exception ex)
            {
                throw new ServerException($"[0103]Server Error: {ex.Message}");
            }
        }

        public static void SelectionSortByName(Medication[] meds)
        {
            int n = meds.Length;
            for (int i = 0; i < n - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < n; j++)
                {
                    if (string.Compare(meds[j].Name, meds[minIndex].Name) < 0)
                    {
                        minIndex = j;
                    }
                }

                var temp = meds[i];
                meds[i] = meds[minIndex];
                meds[minIndex] = temp;
            }
        }

        public static string FindMaxDosageByDoctor(Medication[] meds, string doctorName)
        {
            double maxDosage = double.MinValue;
            string maxMedication = null;

            foreach (var med in meds)
            {
                if (med.DoctorName == doctorName && med.Dosage > maxDosage)
                {
                    maxDosage = med.Dosage;
                    maxMedication = med.Name;
                }
            }

            return maxMedication;
        }

        public static Medication FindSecondLeastDosage(Medication[] meds)
        {
            if (meds == null || meds.Length < 2)
            {
                return null; // Not enough data to determine the second least dosage
            }

            var uniqueDosages = meds
                .Select(m => m.Dosage)
                .Distinct()
                .OrderBy(d => d)
                .ToList();

            if (uniqueDosages.Count < 2)
            {
                return null; // Not enough unique dosages
            }

            double secondLeastDosage = uniqueDosages[1];

            return meds
                .Where(m => m.Dosage == secondLeastDosage)
                .OrderBy(m => m.HospitalID)
                .FirstOrDefault();
        }
    }

    public class Program
    {
        private static readonly ILog log = LogManager.GetLogger(typeof(Program));

        static void Main(string[] args)
        {
            log4net.Config.XmlConfigurator.Configure();

            Medication[] meds = new Medication[5];
            try
            {
                MedicationService.Read(meds);
            }
            catch (ServerException ex)
            {
                log.Error($"{ex.Message}");
            }

            MedicationService.SelectionSortByName(meds);
            log.Info("Sorted medications by name:");
            foreach (var med in meds)
            {
                log.Info($"{med.Name}: {med.Dosage} mg");
            }

            Console.Write("Enter the doctor's name to find the maximum dosage: ");
            string doctorNameToSearch = Console.ReadLine();
            MedicationService.FindMaxDosageByDoctor(meds, doctorNameToSearch);

            Medication secondLeast = MedicationService.FindSecondLeastDosage(meds);
            if (secondLeast != null)
            {
                log.Info($"Second least dosage is {secondLeast.Name} with dosage {secondLeast.Dosage} mg.");
            }
            else
            {
                log.Info("No second least dosage found.");
            }
        }
    }
}


2. App.config
------------------

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
	</configSections>

	<log4net>
		<!-- File Appender -->
		<appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
			<file value="week4assessment_app_log.log" />
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="5" />
			<maximumFileSize value="10MB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>

		<!-- Console Appender -->
		<appender name="ConsoleAppender" type="log4net.Appender.ConsoleAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date [%thread] %-5level %logger - %message%newline" />
			</layout>
		</appender>

		<!-- Root logger -->
		<root>
			<level value="ALL" />
			<appender-ref ref="FileAppender" />
			<appender-ref ref="ConsoleAppender" />
		</root>
	</log4net>
	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
	</startup>
</configuration>


3. AssemblyInfo
-------------------

using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ConsoleApp10")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ConsoleApp10")]
[assembly: AssemblyCopyright("Copyright Â©  2024")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible
// to COM components.  If you need to access a type in this assembly from
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("3cb0cf33-9953-4219-8aa5-e2aaa4df6dbb")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
[assembly: log4net.Config.XmlConfigurator]


4. MedicationServiceTest.cs 
-----------------------------

using Microsoft.VisualStudio.TestTools.UnitTesting;
using Week4AssessmentApp;
using System;

namespace Week4AssessmentApp.Tests
{
    [TestClass]
    public class MedicationServiceTests
    {
        [TestMethod]
        public void SelectionSortByNameTest()
        {
            Medication[] meds = new Medication[3];
            meds[0] = new Medication { HospitalID = 1, DoctorName = "Dr. Smith", Name = "Ibuprofen", Dosage = 200.0 };
            meds[1] = new Medication { HospitalID = 2, DoctorName = "Dr. Johnson", Name = "Paracetamol", Dosage = 150.0 };
            meds[2] = new Medication { HospitalID = 3, DoctorName = "Dr. Williams", Name = "Amoxicillin", Dosage = 250.0 };

            Medication[] expected = new Medication[3];
            expected[0] = new Medication { HospitalID = 3, DoctorName = "Dr. Williams", Name = "Amoxicillin", Dosage = 250.0 };
            expected[1] = new Medication { HospitalID = 1, DoctorName = "Dr. Smith", Name = "Ibuprofen", Dosage = 200.0 };
            expected[2] = new Medication { HospitalID = 2, DoctorName = "Dr. Johnson", Name = "Paracetamol", Dosage = 150.0 };

            MedicationService.SelectionSortByName(meds);

            for (int i = 0; i < meds.Length; i++)
            {
                Assert.AreEqual(expected[i].ToString(), meds[i].ToString());
            }
        }

        [TestMethod]
        public void FindMaxDosageByDoctorTest()
        {
            Medication[] meds = new Medication[3];
            meds[0] = new Medication { HospitalID = 1, DoctorName = "Dr. Smith", Name = "Ibuprofen", Dosage = 200.0 };
            meds[1] = new Medication { HospitalID = 2, DoctorName = "Dr. Johnson", Name = "Paracetamol", Dosage = 150.0 };
            meds[2] = new Medication { HospitalID = 3, DoctorName = "Dr. Smith", Name = "Amoxicillin", Dosage = 500.0 };

            string expected = "Amoxicillin";

            string actual = MedicationService.FindMaxDosageByDoctor(meds, "Dr. Smith");

            Assert.AreEqual(expected, actual);
        }

        [TestMethod]
        public void FindSecondLeastDosageTest()
        {
            Medication[] meds = new Medication[5];
            meds[0] = new Medication { HospitalID = 1, DoctorName = "Dr. Smith", Name = "Ibuprofen", Dosage = 200.0 };
            meds[1] = new Medication { HospitalID = 2, DoctorName = "Dr. Johnson", Name = "Paracetamol", Dosage = 150.0 };
            meds[2] = new Medication { HospitalID = 3, DoctorName = "Dr. Williams", Name = "Amoxicillin", Dosage = 500.0 };
            meds[3] = new Medication { HospitalID = 4, DoctorName = "Dr. Brown", Name = "Penicillin", Dosage = 100.0 };
            meds[4] = new Medication { HospitalID = 5, DoctorName = "Dr. Miller", Name = "Aspirin", Dosage = 150.0 };

            // Adjusting expected value to match the logic
            Medication expected = new Medication { HospitalID = 2, DoctorName = "Dr. Johnson", Name = "Paracetamol", Dosage = 150.0 };

            Medication actual = MedicationService.FindSecondLeastDosage(meds);

            Assert.AreEqual(expected.ToString(), actual.ToString());
        }

    }
}


5.OUTPUT
-------------


2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Sorted medications by name:
2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Amoxicillin: 500 mg
2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Aspirin: 100 mg
2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Paracetamol: 150 mg
2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Tonic: 200 mg
2024-08-31 17:59:49,295 [1] INFO  Week4AssessmentApp.Program - Tylenol: 50 mg
Enter the doctor's name to find the maximum dosage: Dr. Smith
2024-08-31 17:59:58,533 [1] INFO  Week4AssessmentApp.Program - Second least dosage is Aspirin with dosage 100 mg.
Press any key to continue . . .
